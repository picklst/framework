# Generated by Django 3.0.4 on 2020-05-26 22:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import framework.utils.cornflakes.fields
import media.fields
import media.storages


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', framework.utils.cornflakes.fields.ShadedIDField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('isVerified', models.BooleanField(default=False)),
                ('isProfilePrivate', models.BooleanField(default=False)),
                ('isBusinessProfile', models.BooleanField(default=False)),
                ('isEmailVerified', models.BooleanField(default=False)),
                ('first_name', models.CharField(blank=True, default='', max_length=255, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, default='', max_length=255, verbose_name='Last Name')),
                ('bio', models.CharField(blank=True, default='', max_length=255, verbose_name='Bio')),
                ('url', models.URLField(blank=True, default='', max_length=255, verbose_name='URL')),
                ('avatar', media.fields.MediaField(blank=True, null=True, storage=media.storages.UserAvatarStorage(), upload_to='')),
                ('cover', media.fields.MediaField(blank=True, null=True, storage=media.storages.UserCoverStorage(), upload_to='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserInvite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('referrer', models.EmailField(blank=True, max_length=254, null=True)),
                ('inviteSend', models.BooleanField(default=False)),
                ('createdTimestamp', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Invite',
                'verbose_name_plural': 'User Invites',
                'db_table': 'user_invite',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lastSeenTimestamp', models.DateTimeField(auto_now=True)),
                ('ipAddress', models.GenericIPAddressField(blank=True, null=True)),
                ('operatingSystem', models.CharField(blank=True, default='', max_length=63)),
                ('browser', models.CharField(blank=True, default='', max_length=63)),
                ('device', models.CharField(blank=True, default='', max_length=63)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'user_session',
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', framework.utils.cornflakes.fields.ShadedIDField(primary_key=True, serialize=False)),
                ('createdTimestamp', models.DateTimeField(auto_now=True)),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to=settings.AUTH_USER_MODEL, verbose_name='Subscriber')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Subscription',
                'verbose_name_plural': 'User Subscriptions',
                'db_table': 'user_subscription',
                'unique_together': {('user', 'subscriber')},
            },
        ),
    ]
